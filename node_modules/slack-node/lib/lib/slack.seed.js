// Generated by CoffeeScript 1.8.0
var Slack, request,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

request = require("request");

Slack = (function() {
  function Slack(token, domain) {
    this.token = token;
    this.domain = domain;
    this.api = __bind(this.api, this);
    this.webhook = __bind(this.webhook, this);
    this.detectEmoji = __bind(this.detectEmoji, this);
    this.setWebHook = __bind(this.setWebHook, this);
    this.composeUrl = __bind(this.composeUrl, this);
    this.apiMode = !this.domain ? true : false;
    this.url = this.composeUrl();
  }

  Slack.prototype.composeUrl = function() {
    return "https://slack.com/api/";
  };

  Slack.prototype.setWebHook = function(url) {
    return this.webhookUrl = url;
    return this;
  };

  Slack.prototype.detectEmoji = function(emoji) {
    var obj;
    obj = [];
    if (!emoji) {
      obj["key"] = "icon_emoji";
      obj["val"] = "";
      return obj;
    }
    if (emoji.match(/^http/)) {
      obj["key"] = "icon_url";
      obj["val"] = emoji;
    } else {
      obj["key"] = "icon_emoji";
      obj["val"] = emoji;
    }
    return obj;
  };

  Slack.prototype.webhook = function(options, callback) {
    var emoji, payload;
    emoji = this.detectEmoji(options.icon_emoji);
    payload = {
      channel: options.channel,
      text: options.text,
      username: options.username,
      attachments: options.attachments
    };
    payload[emoji["key"]] = emoji["val"];
    return request.post({
      url: this.webhookUrl,
      body: JSON.stringify(payload)
    }, function(err, body, response) {
      return callback(err, {
        status: err || response !== "ok" ? "fail" : "ok",
        statusCode: body.statusCode,
        headers: body.headers,
        response: response
      });
    });
  };

  Slack.prototype.api = function(method, options, callback) {
    var request_arg, url;
    if (typeof options === "function") {
      callback = options;
      options = {};
    }
    options = options || {};
    options.token = this.token;
    url = this.url + method;
    request_arg = {
      url: this.url + method
    };
    if (this._is_post_api(method)) {
      request_arg.method = "POST";
      request_arg.form = options;
    } else {
      request_arg.method = "GET";
      request_arg.qs = options;
    }
    request(request_arg, function(err, body, response) {
      if (err) {
        return callback(err, {
          status: "fail",
          response: response
        });
      }
      if (callback) {
        callback(err, JSON.parse(response));
      }
    });
    return this;
  };

  Slack.prototype._is_post_api = function(method) {
    if (method === "files.upload") {
      return true;
    }
  };

  return Slack;

})();

module.exports = Slack;
