{
  "name": "lambda-js",
  "description": "Syntactic sugar for lambda one-liners in Javascript that doesn't include a performance penalty",
  "homepage": "https://github.com/dfellis/lambda-js",
  "author": {
    "name": "David Ellis"
  },
  "version": "0.1.5",
  "main": "./lib/lambda",
  "dependencies": {},
  "devDependencies": {
    "nodeunit": "*",
    "docco": "*",
    "uglify-js": "*"
  },
  "engines": {
    "node": "*"
  },
  "scripts": {
    "realpublish": "npm test && docco ./lib/lambda.js && uglifyjs ./lib/lambda.js > ./lib/lambda.min.js && git commit -am \"Automatic doc and minification for version $npm_package_version\" && git tag $npm_package_version && git push && git push --tags && npm publish",
    "test": "nodeunit ./test/test.js"
  },
  "readme": "# lambda-js [![Build Status](https://travis-ci.org/dfellis/lambda-js.png?branch=master)](https://travis-ci.org/dfellis/lambda-js)\n\n## Quick install instructions\n\nFor Node.js\n\n    npm install lambda-js\n\nFor browsers, just copy ``./lib/lambda.min.js`` (generated by [UglifyJS](https://github.com/mishoo/UglifyJS/))and include it in a ``<script>`` tag.\n\nFor developers, ``npm test`` to check your changes (using [nodeunit](https://github.com/caolan/nodeunit/)) haven't broken existing functionality. Literate programming documentation can be found inside of the ``/docs`` directory, generated by [docco](http://jashkenas.github.com/docco/).\n\n## Syntactic sugar for lambda one-liners without a performance penalty\n\nUntil ECMAScript 6 gives us the fat-arrow syntax for one-liners in functional style evaluation,\n\n```js\n[1,2,3,4,5,6,7,8,9,10]\n\t.map(x => x*2)\n\t.reduce((sum, val) => sum + val);\n```\n\nSuch one-liners include a lot of ugly noise:\n\n```js\n[1,2,3,4,5,6,7,8,9,10]\n\t.map(function(x) { return x*2 })\n\t.reduce(function(sum, val) { return sum + val });\n```\n\nJavascript allows us to define functions on-the-fly,\n\n```js\nvar adder = new Function(\"a,b\", \"return a+b\");\n```\n\nAnd with that capability, and caching already-constructed lambdas so there's no performance penalty beyond the initial construction, we can have nice one-liners even before ES6:\n\n```js\nvar l = require('lambda-js');\n\n[1,2,3,4,5,6,7,8,9,10]\n\t.map(l(\"x\", \"x*2\"))\n\t.reduce(l(\"sum, val\", \"sum + val\"));\n```\n\nLambdas are \"pure\" functions, not closures, so the following won't work:\n\n```js\nvar l = require('lambda-js');\nvar foo = 'bar';\nvar impureLambda = l('baz', 'foo + baz'); // Will throw a ReferenceError, foo not defined\n```\n\nBut pure functions are perfectly predictable because their output is totally determined by their inputs, and the closures where they are defined cannot affect their behavior, so it can also be useful to \"scrub\" a larger function with lambda-js:\n\n```js\nvar l = require('lambda-js');\nvar scrubbedFunction = l(function(foo, bar) {\n    var foosin = Math.sin(foo*foo);\n    var barrep = bar.replace(/bar/g, 'baz');\n    return foosin + barrep;\n});\n```\n\nLambda-js attaches a ``pure`` property to the lambdas (with a value of ``true``), which can be used by other libraries to determine if the function they have been provided is a pure function or a closure.\n\nIf you need to transmit lambdas over the wire, Lambda-js provides a simple serialization and deserialization mechanism.\n\n```js\nvar l = require('lambda-js');\nvar funcObj = l.serialize(function(foo, bar) {\n    var foosin = Math.sin(foo*foo);\n    var barrep = bar.replace(/bar/g, 'baz');\n    return foosin + barrep;\n});\n\nvar funcObjStr = JSON.stringify(funcObj); // Doesn't throw\n\nvar func = l.deserialize(funcObj);\n```\n\n## License (MIT)\n\nCopyright (C) 2012-2013 by David Ellis\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n",
  "_id": "lambda-js@0.1.5",
  "dist": {
    "shasum": "e4aa55d760238898921ad2cc82443ed8b7c688d3",
    "tarball": "http://registry.npmjs.org/lambda-js/-/lambda-js-0.1.5.tgz"
  },
  "_npmVersion": "1.1.59",
  "_npmUser": {
    "name": "dfellis",
    "email": "d.f.ellis@ieee.org"
  },
  "maintainers": [
    {
      "name": "dfellis",
      "email": "d.f.ellis@ieee.org"
    }
  ],
  "directories": {},
  "_shasum": "e4aa55d760238898921ad2cc82443ed8b7c688d3",
  "_from": "lambda-js@*",
  "_resolved": "https://registry.npmjs.org/lambda-js/-/lambda-js-0.1.5.tgz"
}
